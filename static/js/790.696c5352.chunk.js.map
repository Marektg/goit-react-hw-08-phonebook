{"version":3,"file":"static/js/790.696c5352.chunk.js","mappings":"4QAmHA,UAxGqB,WACjB,OAAiBA,EAAAA,EAAAA,MAAVC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAa,mCAAG,WAAMC,GAAN,0FAClBA,EAAEC,iBACIC,EAAOF,EAAEG,OACTC,EAAYF,EAAKE,UAAUC,MAC3BC,EAAWJ,EAAKI,SAASD,MACzBE,EALY,UAKFH,EALE,YAKWE,GACvBE,EAAQN,EAAKM,MAAMH,MACnBI,EAAWP,EAAKO,SAASJ,MACzBK,EAAkBR,EAAKQ,gBAAgBL,MAEzCI,IAAaC,EAVC,0CAWPC,MAAM,qDAXC,eAcZC,EAAc,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,GAdjB,UAeZf,EAAOkB,GACRC,SACAC,MAAK,YAAuC,IAApCC,EAAmC,EAAnCA,MAAmC,IAA5BC,KAAQR,EAAoB,EAApBA,MAAOD,EAAa,EAAbA,KAC3BU,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,IACzCA,GACApB,GAAS0B,EAAAA,EAAAA,IAAQ,CAAEb,MAAAA,EAAOD,KAAAA,IAEjC,IACAe,OAAM,WACHX,MAAM,+CACT,IAzBa,0BA2BEY,EAAAA,EAAAA,GAAoB,SA3BtB,gBA4BJC,KADRT,EA3BY,4EAgCZpB,GAAS8B,EAAAA,EAAAA,IAASV,IAhCN,yBAiCZlB,EAAS,aAjCG,QAkClBK,EAAKwB,QAlCa,4CAAH,sDAqCnB,OACI,iCAEQ,0CACA,kBAAMC,SAAU5B,EAAhB,WACI,0BACI,2CAEI,kBAAO6B,KAAK,OAAOrB,KAAK,YAAYsB,UAAQ,UAGpD,0BACI,0CAEI,kBAAOD,KAAK,OAAOrB,KAAK,WAAWsB,UAAQ,UAGnD,0BACI,uCAEI,kBACID,KAAK,QACLrB,KAAK,QACLuB,QAAQ,0CACRC,aAAa,QACbF,UAAQ,UAIpB,0BACI,yCAEI,kBACID,KAAK,WACLrB,KAAK,WACLuB,QAAQ,uCACRE,MAAM,yGACND,aAAa,eACbF,UAAQ,UAIpB,0BACI,iDAEI,kBACID,KAAK,WACLrB,KAAK,kBACLuB,QAAQ,uCACRE,MAAM,yGACND,aAAa,uBACbF,UAAQ,UAIpB,mBAAQD,KAAK,SAAb,0BAKnB,C","sources":["pages/registration.jsx"],"sourcesContent":["import React from 'react';\nimport { useSignupMutation } from 'services/phonebookApi';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n// import { warningNotify } from 'utils/notifications';\n// import Cookies from 'js-cookie';\nimport { addUser } from 'redux/userSlice';\nimport { addToken } from 'redux/tokenSlice';\n// import { RegistrationForm } from './Registration.styled';\nimport getFromLocalStorage from 'utilites/getFromLocalStore';\n\nconst Registration = () => {\n    const [signup] = useSignupMutation();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const submitHandler = async e => {\n        e.preventDefault();\n        const form = e.target;\n        const firstName = form.firstName.value;\n        const lastName = form.lastName.value;\n        const name = `${firstName} ${lastName}`;\n        const email = form.email.value;\n        const password = form.password.value;\n        const passwordConfirm = form.passwordConfirm.value;\n\n        if (password !== passwordConfirm) {\n            return alert('Password and password confirmation do not match!');\n        }\n\n        const credentials = { name, email, password };\n        await signup(credentials)\n            .unwrap()\n            .then(({ token, user: { email, name } }) => {\n                localStorage.setItem(\"token\", JSON.stringify(token));\n                if (token) {\n                    dispatch(addUser({ email, name }));\n                }\n            })\n            .catch(() => {\n                alert('User with this email address already exists!');\n            });\n\n        const token = await getFromLocalStorage(\"token\")\n        if (token === undefined) {\n            return;\n        }\n\n        await dispatch(addToken(token));\n        await navigate('/contacts');\n        form.reset();\n    };\n\n    return (\n        <>\n          \n                <h2>Registration</h2>\n                <form onSubmit={submitHandler}>\n                    <div>\n                        <label>\n                            First name\n                            <input type=\"text\" name=\"firstName\" required />\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            Last name\n                            <input type=\"text\" name=\"lastName\" required />\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            E-mail\n                            <input\n                                type=\"email\"\n                                name=\"email\"\n                                pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n                                autoComplete=\"email\"\n                                required\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            Password\n                            <input\n                                type=\"password\"\n                                name=\"password\"\n                                pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n                                title=\"Must contain at least one uppercase and lowercase letter, one number and at least 8 or more characters\"\n                                autoComplete=\"new-password\"\n                                required\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            Confirm password\n                            <input\n                                type=\"password\"\n                                name=\"passwordConfirm\"\n                                pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n                                title=\"Must contain at least one uppercase and lowercase letter, one number and at least 8 or more characters\"\n                                autoComplete=\"new-password-confirm\"\n                                required\n                            />\n                        </label>\n                    </div>\n                    <button type=\"submit\">Sign up</button>\n                </form>\n          \n        </>\n    );\n};\n\nexport default Registration;"],"names":["useSignupMutation","signup","dispatch","useDispatch","navigate","useNavigate","submitHandler","e","preventDefault","form","target","firstName","value","lastName","name","email","password","passwordConfirm","alert","credentials","unwrap","then","token","user","localStorage","setItem","JSON","stringify","addUser","catch","getFromLocalStorage","undefined","addToken","reset","onSubmit","type","required","pattern","autoComplete","title"],"sourceRoot":""}